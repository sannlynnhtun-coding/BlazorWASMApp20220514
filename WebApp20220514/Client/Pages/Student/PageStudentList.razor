@page "/student"
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h2>Student</h2>

<h2>Section title</h2>
<span>@message</span>
<div class="row">
    <div class="col-6">
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Id</label>
            <input type="text" class="form-control" @bind-value="item.studentId">
        </div>
    </div>
    <div class="col-6">
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Code</label>
            <input type="text" class="form-control" @bind-value="item.studentCode">
        </div>
    </div>
    <div class="col-6">
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Name</label>
            <input type="text" class="form-control" @bind-value="item.studentName">
        </div>
    </div>
    <div class="col-6">
        <div class="mb-3">
            <button class="btn btn-success" @onclick="Save">Save</button>
        </div>
    </div>
</div>
<div class="table-responsive">
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Student Id</th>
                <th scope="col">Student Code</th>
                <th scope="col">Student Name</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @{
                if (lst != null)
                {
                    int count = 0;
                    foreach (var item in lst)
                    {
                        <tr>
                            <td>@(++count)</td>
                            <td>@item.studentId</td>
                            <td>@item.studentCode</td>
                            <td>@item.studentName</td>
                            <td><button class="btn btn-info" @onclick="() => Edit(item.studentId)">Delete</button></td>
                            <td><button class="btn btn-danger" @onclick="() => Delete(item.studentId)">Delete</button></td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

@code {
    private StudentModel[] lst;
    private string message;
    private StudentModel item = new StudentModel();

    protected override async Task OnInitializedAsync()
    {
        await List();
    }

    private async Task List()
    {
        lst = await Http.GetFromJsonAsync<StudentModel[]>("Student");
    }

    private async Task Delete(int id)
    {
        var res = await Http.DeleteAsync("Student/" + id);
        if (res.IsSuccessStatusCode)
        {

            var isDelete = Convert.ToBoolean(res.Content.ReadAsStringAsync().Result);
            message = "Delete Successfully";
            await JsRuntime.InvokeVoidAsync("alert", message);
            await List();
        }
    }

    private async Task Save()
    {
        HttpResponseMessage res;
        if (item.studentId == 0)
            res = await Http.PostAsJsonAsync("Student", item);
        else
            res = await Http.PutAsJsonAsync("Student/" + item.studentId, item);
        if (res.IsSuccessStatusCode)
        {
            ResponseModel model = JsonSerializer.Deserialize<ResponseModel>(res.Content.ReadAsStringAsync().Result);
            if (model.respCode == EnumRespCode.success)
            {
                await JsRuntime.InvokeVoidAsync("alert", model.respDesp);
                await List();
            }
        }
    }

    private async Task Edit(int id)
    {
        var res = await Http.GetAsync("Student/" + id);
        if (res.IsSuccessStatusCode)
        {
            item = JsonSerializer.Deserialize<StudentModel>(res.Content.ReadAsStringAsync().Result);
            StateHasChanged();
        }
    }
}
