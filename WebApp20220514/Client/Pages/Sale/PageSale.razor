@page "/sale"
@*@inject HttpClient httpClient*@
@inject IInjectService InjectService
@*@inject NavigationManager NavigationManager*@
@*<MudTable Items="@lst" Hover="true" SortLabel="Sort By">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<SaleModel, object>(x=>x.productName)">Product Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<SaleModel, object>(x=>x.price)">Price</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SaleModel, object>(x=>x.qty)">Qty</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SaleModel, object>(x=>x.amount)">Amount</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SaleModel, object>(x=>x.saleDate)">Sale Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SaleModel, object>(x=>x.country)">Country</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SaleModel, object>(x=>x.staffName)">Staff Name</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Product Name">@context.productName</MudTd>
            <MudTd DataLabel="Price">@context.price</MudTd>
            <MudTd DataLabel="Qty">@context.qty</MudTd>
            <MudTd DataLabel="Amount">@(context.price * context.qty)</MudTd>
            <MudTd DataLabel="Sale Date">@context.saleDate.ToString("dd-MM-yyyy hh:mm tt")</MudTd>
            <MudTd DataLabel="Country">@context.country</MudTd>
            <MudTd DataLabel="Staff Name">@context.staffName</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>*@
<button class="btn btn-info" @onclick="New">New</button>
@if (lst == null)
{
    <div>Loading Data...</div>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <table class="table table-bordered table-striped table-hover">
                <thead>
                    <tr>
                        <th>
                            Action
                        </th>
                        <th>Sr.</th>
                        <th>Product Name</th>
                        <th>Qty</th>
                        <th>Amount</th>
                        <th>Sale Date</th>
                        <th>Country</th>
                        <th>Staff Name</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < lst.Count; i++)
                    {
                        var item = lst[i];
                        <tr>
                            <td>
                                <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Edit(item.saleId)">Edit</button>
                            </td>
                            <td>@(i + 1)</td>
                            <td>@(item.productName)</td>
                            <td>@(item.price)</td>
                            <td>@(item.qty)</td>
                            <td>@(item.amount * item.qty)</td>
                            <td>@(item.saleDate.ToString("dd-MM-yyyy hh:mm tt"))</td>
                            <td>@(item.country)</td>
                            <td>@(item.staffName)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@*<MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>*@

@code {
    private bool enabled = true;
    private SaleResModel model;
    private List<SaleModel> lst;

    protected override async Task OnInitializedAsync()
    {
        string url = ApiUrl.Sale + "/1/10";
        url.ToConsole();
        //model = await httpClient.GetFromJsonAsync<SaleResModel>(url);
        model = await InjectService.ExecuteApiAsync<SaleResModel>(url, httpMethod: EnumHttpMethod.Get);
        JsonSerializer.Serialize(model).ToConsole();
        if (model != null && model.response != null && model.response.respCode == "000")
        {
            lst = model.lstSale;
        }
    }

    private void New()
    {
        InjectService.Go("/sale/add");
    }

    async Task Edit(int saleId)
    {
        SaleResModel model = await InjectService.ExecuteApiAsync<SaleResModel>(ApiUrl.Sale + $"/{saleId}", httpMethod : EnumHttpMethod.Get);
        model.ToConsole();

        InjectService.Go($"/sale/edit/{saleId}");
    }
}
